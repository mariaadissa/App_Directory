observeEvent(input$clicks,{output$hist <- renderPlot({
hist(data(), main=isolate({input$title}))
})})
output$stats <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
# 3rd App
ui <- fluidPage(
sliderInput("num3",label="Choose a number",value=30,min=0,max=100),
actionButton("clicks",label="Update"),
textInput("title", label="Write a title", value="Histogram of Random Normal Values"),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input, output){
data <- reactive({
rnorm(input$num3)
})
observeEvent(input$clicks,{rnorm(input$num3)})
output$hist <- renderPlot({
hist(data(), main=isolate({input$title}))
})
output$stats <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
library(RclusTool)
RclusToolG
RclusToolGUI()
?RclusTool
?RclusTool::analyzePlot
install.packages("rmarkdown")
library(RclusTool)
RclusToolGUI()
RclusToolGUI()
library(shiny)
library(shiny)
# 4th App
ui <- fluidPage(
sliderInput("num3",label="Choose a number",value=30,min=0,max=100),
actionButton("update",label="Update"),
textInput("title", label="Write a title", value="Histogram of Random Normal Values"),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input, output){
data <- eventReactive(input$update,{
rnorm(input$num3)
})
output$hist <- renderPlot({
hist(data(), main=isolate({input$title}))
})
output$stats <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
# 5th App
ui <- fluidPage(
actionButton("norm",label="Normal"),
actionButton("unif",label="Uniform"),
plotOutput("hist")
)
server <- function(input, output){
rv <- reactiveValues(data = rnorm(100))
observeEvent(input$norm, {rv$data <-rnorm(100)})
observeEvent(input$unif, {rv$data <-runif(100)})
output$hist <- renderPlot({
hist(rv$data)
})
}
shinyApp(ui = ui, server = server)
?reactiveValues
# 5th App
ui <- fluidPage(
actionButton("norm",label="Normal"),
actionButton("unif",label="Uniform"),
plotOutput("hist")
)
server <- function(input, output){
rv <- reactiveValues(data = rnorm(100))
observeEvent(input$norm, {rv$data <-rnorm(100)})
observeEvent(input$unif, {rv$data <-runif(100)})
output$hist <- renderPlot({
hist(rv$data)
})
}
shinyApp(ui = ui, server = server)
# 5th App
ui <- fluidPage(
actionButton("norm",label="Normal"),
actionButton("unif",label="Uniform"),
plotOutput("hist")
)
server <- function(input, output){
rv <- reactiveValues(data = rnorm(100))
observeEvent(input$norm, {rv$data <-rnorm(100)})
observeEvent(input$unif, {rv$data <-runif(100)})
output$hist <- renderPlot({
hist(rv$data)
})
}
shinyApp(ui = ui, server = server)
# 5th App
ui <- fluidPage(
actionButton("norm",label="Normal"),
actionButton("unif",label="Uniform"),
textInput("title", label="Write a title", value="Histogram of Random Normal Values"),
plotOutput("hist")
)
server <- function(input, output){
rv <- reactiveValues(data = rnorm(100))
observeEvent(input$norm, {rv$data <-rnorm(100)})
observeEvent(input$unif, {rv$data <-runif(100)})
output$hist <- renderPlot({
hist(rv$data)
})
}
shinyApp(ui = ui, server = server)
# 5th App
ui <- fluidPage(
actionButton("norm",label="Normal"),
actionButton("unif",label="Uniform"),
textInput("title", label="Write a title", value="Histogram of Random Normal Values"),
plotOutput("hist")
)
server <- function(input, output){
rv <- reactiveValues(data = rnorm(100))
observeEvent(input$norm, {rv$data <-rnorm(100)})
observeEvent(input$unif, {rv$data <-runif(100)})
output$hist <- renderPlot({
hist(rv$data, main=input$title)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours')
ui <- fluidPage(title = "Random generator",
navlistPanel(
tabPanel(title = "Normal data",
plotOutput("norm"),
actionButton("renorm", "Resample")
),
tabPanel(title = "Uniform data",
plotOutput("unif"),
actionButton("reunif", "Resample")
),
tabPanel(title = "Chi Squared data",
plotOutput("chisq"),
actionButton("rechisq", "Resample")
)
)
)
server <- function(input, output) {
rv <- reactiveValues(
norm = rnorm(500),
unif = runif(500),
chisq = rchisq(500, 2))
observeEvent(input$renorm, { rv$norm <- rnorm(500) })
observeEvent(input$reunif, { rv$unif <- runif(500) })
observeEvent(input$rechisq, { rv$chisq <- rchisq(500, 2) })
output$norm <- renderPlot({
hist(rv$norm, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard normal distribution")
})
output$unif <- renderPlot({
hist(rv$unif, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard uniform distribution")
})
output$chisq <- renderPlot({
hist(rv$chisq, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a Chi Square distribution with two degree of freedom")
})
}
shinyApp(server = server, ui = ui)
ui <- fluidPage(
tabsetPanel(
tabPanel(
"App 7",
wellPanel(
fluidRow(
column(3,plotOutput("hist")),
column(5, sliderInput("num4",label="Choose a number",value=30,min=0,max=100)),
column(4,actionButton("update",label="Update"))
)
),
fluidRow(
column(4, offset=8)
)
),
tabPanel(title = "Normal data",
plotOutput("norm"),
actionButton("renorm", "Resample")
),
tabPanel(title = "Uniform data",
plotOutput("unif"),
actionButton("reunif", "Resample")
),
tabPanel(title = "Chi Squared data",
plotOutput("chisq"),
actionButton("rechisq", "Resample")
)
)
)
server <- function(input, output){
data <- eventReactive(input$update,{
rnorm(input$num4)
})
output$hist <- renderPlot({hist(data())})
rv <- reactiveValues(
norm = rnorm(500),
unif = runif(500),
chisq = rchisq(500, 2))
observeEvent(input$renorm, { rv$norm <- rnorm(500) })
observeEvent(input$reunif, { rv$unif <- runif(500) })
observeEvent(input$rechisq, { rv$chisq <- rchisq(500, 2) })
output$norm <- renderPlot({
hist(rv$norm, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard normal distribution")
})
output$unif <- renderPlot({
hist(rv$unif, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard uniform distribution")
})
output$chisq <- renderPlot({
hist(rv$chisq, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a Chi Square distribution with two degree of freedom")
})
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours')
ui <- fluidPage(title = "Random generator",
navlistPanel(
tabPanel(title = "Normal data",
plotOutput("norm"),
actionButton("renorm", "Resample")
),
tabPanel(title = "Uniform data",
plotOutput("unif"),
actionButton("reunif", "Resample")
),
tabPanel(title = "Chi Squared data",
plotOutput("chisq"),
actionButton("rechisq", "Resample")
)
)
)
server <- function(input, output) {
rv <- reactiveValues(
norm = rnorm(500),
unif = runif(500),
chisq = rchisq(500, 2))
observeEvent(input$renorm, { rv$norm <- rnorm(500) })
observeEvent(input$reunif, { rv$unif <- runif(500) })
observeEvent(input$rechisq, { rv$chisq <- rchisq(500, 2) })
output$norm <- renderPlot({
hist(rv$norm, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard normal distribution")
})
output$unif <- renderPlot({
hist(rv$unif, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard uniform distribution")
})
output$chisq <- renderPlot({
hist(rv$chisq, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a Chi Square distribution with two degree of freedom")
})
}
shinyApp(server = server, ui = ui)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
Sys.getenv("PATH")
head(iris)
library(shiny)
View(iris)
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours')
scatterplot3d::scatterplot3d(iris)
library(shiny)
ui <- fluidPage(sliderInput("num",label="Choose a number",value=30,min=0,max=150),
plotOutput("hist"),
dataTableOutput("tab"))
server <- function(input, output){
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(100), main=title)
})
output$tab <- renderDataTable({
title <- "Iris data frame"
head(iris,n=input$num)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(sliderInput("num",label="Choose a number",value=30,min=0,max=150),
plotOutput("hist"),
dataTableOutput("tab"))
server <- function(input, output){
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(100), main=title)
})
output$tab <- renderDataTable({
title <- "Iris data frame"
head(iris,n=input$num)
})
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
ui <- fluidPage(
tabsetPanel(
tabPanel(
"App 7",
wellPanel(
fluidRow(
column(3,plotOutput("hist")),
column(5, sliderInput("num4",label="Choose a number",value=30,min=0,max=100)),
column(4,actionButton("update",label="Update"))
)
),
fluidRow(
column(4, offset=8)
)
),
tabPanel(title = "Normal data",
plotOutput("norm"),
actionButton("renorm", "Resample")
),
tabPanel(title = "Uniform data",
plotOutput("unif"),
actionButton("reunif", "Resample")
),
tabPanel(title = "Chi Squared data",
plotOutput("chisq"),
actionButton("rechisq", "Resample")
)
)
)
server <- function(input, output){
data <- eventReactive(input$update,{
rnorm(input$num4)
})
output$hist <- renderPlot({hist(data())})
rv <- reactiveValues(
norm = rnorm(500),
unif = runif(500),
chisq = rchisq(500, 2))
observeEvent(input$renorm, { rv$norm <- rnorm(500) })
observeEvent(input$reunif, { rv$unif <- runif(500) })
observeEvent(input$rechisq, { rv$chisq <- rchisq(500, 2) })
output$norm <- renderPlot({
hist(rv$norm, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard normal distribution")
})
output$unif <- renderPlot({
hist(rv$unif, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard uniform distribution")
})
output$chisq <- renderPlot({
hist(rv$chisq, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a Chi Square distribution with two degree of freedom")
})
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
library(RclusTool)
RclusToolGUI()
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
library(ggplot)
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
library(ggplot2)
ui <- navbarPage(title = "Iris",
tabPanel(title = "Overview",
wellPanel(
fluidRow(
column(3, sliderInput("num_samples",label="Data samples",value=30,min=0,max=150))
)
),
dataTableOutput("overview_tab")
),
navbarMenu(title = "Plots",
tabPanel(title = "Scatter plot",
sidebarPanel(
selectInput("x", label = "X-axis",
choices = list("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected ="Sepal.Length"),
selectInput("y", label = "Y-axis",
choices = list("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected ="Sepal.Width")
),
mainPanel(
plotOutput("scatterplot")
)
),
tabPanel(title = "Density plot",
plotOutput("chisq"),
actionButton("rechisq", "Resample")
)
)
)
server <- function(input, output){
output$overview_tab <- renderDataTable({
title <- "Iris data frame"
head(iris,n=input$num_samples)
})
output$scatterplot <- renderPlot({
ggplot2(data = iris, aes_string(x = input$x, y = input$y)) + geom_point()
})
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
install.packages(c("rgl","car"))
library("car")
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
library(plotly)
install.packages("plotly")
library(plotly)
library(pacman)
install.packages("plotly")
devtools::install_github("ropensci/plotly")
install.packages("plotly")
library
library(devtools)
install.packages("devtools")
library(devtools)
installed.packages("devtools")
library(devtools)
installed.packages("devtools")
install.packages("devtools")
shiny::runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
library(shiny)
library(ggplot2)
library(plotly)
library("rgl")
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
library(car)
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
?plotly
??plotly
library(rgl)
install.packages("plotly")
options(pkgType="binary")
install.packages("plotly")
library(plotly)
install.packages("devtools")
library(devtools)
library(plotly)
shiny::runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
?plot_ly
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
runApp('C:/Users/maria/OneDrive/Desktop/Work/Stage_Dev/Cours/App_Directory')
shiny::runApp()
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel( div(column(width = 6, h2("My Header")),
column(width = 6, tags$img(src = "shiny.png"))),
windowTitle="MyPage"
)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel( div(column(width = 6, h2("My Header")),
column(width = 6, tags$img(src = "shiny.png"))),
windowTitle="MyPage"
)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
q()
